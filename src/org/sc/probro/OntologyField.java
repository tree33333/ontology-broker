package org.sc.probro;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONStringer;

/**
CREATE TABLE ONTOLOGYFIELDS (
field_id        int primary key generated by default as identity,
ontology_id     int not null references ONTOLOGYS(ontology_id) ON DELETE CASCADE,
field_name      varchar(100) not null,
field_description  clob,
field_metadata_key  varchar(100)
);

 * @author tdanford
 *
 */
public class OntologyField extends BrokerData {

	public String id; 
	public Ontology ontology;
	public String name, description, metadata_key;
	
	public OntologyField() { }
	
	public OntologyField(JSONObject obj) throws JSONException { 
		id = obj.getString("href");
		
 		ontology = new Ontology(obj.getJSONObject("ontology"));
		name = obj.getString("field_name");
		description = obj.getString("field_description");
		metadata_key = obj.getString("field_metadata_key");
	}
	
	public OntologyField(String id, JSONObject obj) throws JSONException { 
		this.id = id;

 		ontology = new Ontology(obj.getJSONObject("ontology"));
		name = obj.getString("field_name");
		description = obj.getString("field_description");
		metadata_key = obj.getString("field_metadata_key");
	}
	
	public String toString() { return name; }
	
	public void stringJSON(JSONStringer obj) throws JSONException { 
		obj.object();
		
		obj.key("field_name").value(name);
		obj.key("field_description").value(description);
		obj.key("field_metadata_key").value(metadata_key);
		obj.key("ontology"); ontology.stringJSONLink(obj);
		
		obj.endObject();		
	}
	
}
