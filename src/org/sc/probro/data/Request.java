package org.sc.probro.data;

import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import java.sql.*;

import org.json.JSONException;
import org.json.JSONWriter;
import org.sc.probro.BrokerStart;

public class Request extends DBObject {
	
	public static final Integer RESPONSE_REDUNDANT 		= 0;
	public static final Integer RESPONSE_FULFILLED 		= 1;
	public static final Integer RESPONSE_PENDING		= 2;
	public static final Integer RESPONSE_INCOMPLETE 	= 3;
	public static final Integer RESPONSE_ERROR          = 4;
	public static final Integer RESPONSE_ESCALATION     = 5;

	public Integer request_id;  // primary key, auto-generated
	public String ontology_term;
	public String search_text;
	public String context;
	public String provenance;
	public Integer user_id; 
	public String date_submitted;
	public Integer response_code;
	public Integer ontology_id;

	public Preparation savePreparation(Connection cxn) throws SQLException {
		String tableName = "REQUESTS";
		String stmtStr = String.format("INSERT INTO %s (ontology_term, search_text, "+
				"context, provenance, user_id, date_submitted, response_code, ontology_id) values " + 
				"(?, ?, ?, ?, ?, ?, ?, ?)", tableName);
		PreparedStatement ps = cxn.prepareStatement(stmtStr, Statement.RETURN_GENERATED_KEYS);
		Preparation prep = new Preparation(ps, Request.class, 
				"ontology_term", 
				"search_text", 
				"context", 
				"provenance", 
				"user_id", 
				"date_submitted", 
				"response_code", 
				"ontology_id");
		prep.addClob(2);
		return prep;
	}
	
	public Preparation updatePreparation(Connection cxn) throws SQLException {
		String tableName = "REQUESTS";
		String stmtStr = String.format("UPDATE %s SET ontology_term=?, search_text=?, "+
				"context=?, provenance=?, user_id=?, date_submitted=?, response_code=?, " +
				"ontology_id=? where request_id=?", tableName); 
		PreparedStatement ps = cxn.prepareStatement(stmtStr, Statement.RETURN_GENERATED_KEYS);
		Preparation prep = new Preparation(ps, Request.class, 
				"ontology_term", 
				"search_text", 
				"context", 
				"provenance", 
				"user_id", 
				"date_submitted", 
				"response_code", 
				"ontology_id", 
				"request_id");
		prep.addClob(2);
		return prep;
	}

	public Request() { 
		super();
	}
	
	public Request(ResultSet rs) throws SQLException { super(rs); }
	
	public String getProvisionalTerm() { 
		return String.format("http://%s:%d/request/%d/", 
				BrokerStart.HOSTNAME,
				BrokerStart.PORT,
				request_id); 
	}
	
	protected void writeJSONObjectContents(JSONWriter json) throws JSONException {
		super.writeJSONObjectContents(json);
		json.key("provisional_id").value(getProvisionalTerm());
	}
	
	public int hashCode() { return request_id.hashCode(); }
	
	public boolean isRedundant() { return response_code.equals(RESPONSE_REDUNDANT); }
	public boolean isFulfilled() { return response_code.equals(RESPONSE_FULFILLED); }
	public boolean isPending() { return response_code.equals(RESPONSE_PENDING); }
	public boolean isIncomplete() { return response_code.equals(RESPONSE_INCOMPLETE); }
	
	public void save(Statement stmt) throws SQLException { 
		String saveString = saveString();
		System.out.println(saveString);
		stmt.executeUpdate(saveString);
	}

	public void createInDB(Statement stmt) throws SQLException { 
		stmt.executeUpdate(insertString());
	}
	
	public boolean isAutoGenerated(String fieldName) {
		return fieldName.equals("request_id");
	}
	
	public String saveString() { 
		StringBuilder sb = new StringBuilder();
		String tableName = getClass().getSimpleName().toUpperCase() + "S";
		for(Field f : getClass().getFields()) { 
			int mod = f.getModifiers();
			
			// request_id is the primary key -- we don't want to change *that* field.  
			if(!f.getName().equals("request_id") && Modifier.isPublic(mod) && !Modifier.isStatic(mod)) {
				Object value = null;
				try {
					value = f.get(this);
					if(value != null) { 
						if(sb.length() > 0) { sb.append(", "); }

						sb.append(String.format("%s=%s", f.getName(), asSQL(value)));
					}
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			}
		}
		
		return String.format("UPDATE %s SET %s WHERE request_id=%d",
				tableName, sb.toString(), request_id);
				
	}
	
	public boolean equals(Object o) { 
		if(!(o instanceof Request)) { return false; }
		Request r = (Request)o;
		return r.request_id.equals(request_id);
	}
	
	public String toString() { return request_id.toString(); }
}
