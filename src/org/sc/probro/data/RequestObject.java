/*
	Copyright 2010 Massachusetts General Hospital

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
package org.sc.probro.data;

import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import java.sql.*;

import org.json.JSONException;
import org.json.JSONWriter;
import org.sc.probro.BrokerStart;

public class RequestObject extends DBObject {
	
	public static final Integer RESPONSE_REDUNDANT 		= 0;
	public static final Integer RESPONSE_FULFILLED 		= 1;
	public static final Integer RESPONSE_PENDING		= 2;
	public static final Integer RESPONSE_INCOMPLETE 	= 3;
	public static final Integer RESPONSE_ERROR          = 4;
	public static final Integer RESPONSE_ESCALATION     = 5;

	public Integer request_id;  // primary key, auto-generated
	
	public String ontology_term;
	public String provisional_term;
	public Integer parent_request;
	public String search_text;
	public String context;
	public String comment;
	public String provenance;
	public Integer creator_id;
	public Integer modified_by;
	public java.util.Date date_submitted;
	public Integer status;
	public Integer ontology_id;

	public RequestObject() { 
		super();
	}
	
	public RequestObject(ResultSet rs) throws SQLException { super(rs); }
	
	public String getProvisionalTerm() {
		return String.format("http://%s:%d/request/%s/", 
				BrokerStart.HOSTNAME,
				BrokerStart.PORT,
				provisional_term);
	}
	
	protected void writeJSONObjectContents(JSONWriter json) throws JSONException {
		super.writeJSONObjectContents(json);
		json.key("provisional_id").value(getProvisionalTerm());
	}
	
	public int hashCode() { return request_id.hashCode(); }
	
	public boolean isRedundant() { return status.equals(RESPONSE_REDUNDANT); }
	public boolean isFulfilled() { return status.equals(RESPONSE_FULFILLED); }
	public boolean isPending() { return status.equals(RESPONSE_PENDING); }
	public boolean isIncomplete() { return status.equals(RESPONSE_INCOMPLETE); }
	
	public boolean isAutoGenerated(String fieldName) {
		return fieldName.equals("request_id");
	}
	
	public boolean equals(Object o) { 
		if(!(o instanceof RequestObject)) { return false; }
		RequestObject r = (RequestObject)o;
		return r.request_id.equals(request_id);
	}
	
	public String[] getAutoGeneratedFields() {
		return new String[] { "request_id" };
	}
	
	public String[] getKeyFields() {
		return getAutoGeneratedFields();
	}
}
