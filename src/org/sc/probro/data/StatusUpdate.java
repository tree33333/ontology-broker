package org.sc.probro.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;

/**
 * @deprecated
 * 
 * @author tdanford
 *
 */
public class StatusUpdate extends DBObject {
	
	/**
	update_id        int not null primary key generated by default as identity,
	request_id       int not null references REQUESTS(request_id) ON DELETE CASCADE,
	updated_on       date not null,
	updated_by       int not null references USERS(user_id) ON DELETE CASCADE,
	old_status       int not null,
	new_status       int not null,
	comment          clob
	 */
	
	public Integer update_id;
	public Integer request_id;
	public Date updated_on;
	public Integer updated_by;
	public Integer old_status;
	public Integer new_status;
	public String comment;

	public boolean isAutoGenerated(String fieldName) {
		return fieldName.toLowerCase().equals("update_id");
	}
	
	public StatusUpdate() { 
		super();
	}
	
	public StatusUpdate(ResultSet rs) throws SQLException { 
		super(rs);
	}
	
	public void update(Preparation p) throws SQLException { 
		p.setFromObject(this);
		p.stmt.execute();
	}
	
	public int insert(Preparation p) throws SQLException { 
		p.setFromObject(this);
		p.stmt.execute();

		ResultSet rs = p.stmt.getGeneratedKeys();
		try { 
			if(rs.next()) { 
				return rs.getInt(1);
			} else { 
				throw new IllegalStateException("No key returned.");
			}
		} finally { 
			rs.close();
		}
	}
	
	public Preparation prepareInsertStatement(Connection cxn) throws SQLException {
		String tableName = getClass().getSimpleName().toUpperCase() + "S";  
		String args = "request_id, updated_on, updated_by, old_status, new_status, comment";
		String insert = String.format("INSERT INTO %s (%s) values (?, ?, ?, ?, ?, ?)",
				tableName, args);
		PreparedStatement ps = cxn.prepareStatement(insert, Statement.RETURN_GENERATED_KEYS);
		Preparation p = new Preparation(ps, args, StatusUpdate.class);
		p.addClob(5);
		return p;
	}

	public Preparation prepareUpdateStatement(Connection cxn) throws SQLException {
		String tableName = getClass().getSimpleName().toUpperCase() + "S";  
		String args = "request_id, updated_on, updated_by, old_status, new_status, comment, update_id";
		String insert = String.format("UPDATE %s SET request_id=?, updated_on=?, updated_by=?, " +
				"old_status=?, new_status=?, comment=? where update_id=?",
				tableName);
		PreparedStatement ps = cxn.prepareStatement(insert);
		
		Preparation p = new Preparation(ps, args, StatusUpdate.class);
		p.addClob(5);
		return p;
	}
	
	public String[] getAutoGeneratedFields() {
		return new String[] { "update_id" };
	}
	
	public String[] getKeyFields() {
		return getAutoGeneratedFields();
	}


}
